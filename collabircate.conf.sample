# rename this file to CollabIRCate.yml and put a : in front of "name" if
# you want to use yaml like in old versions of Catalyst
name CollabIRCate
dsn dbi:SQLite:dbname=/full/path/to/database

# define the below if you want to run the builtin irc server
irc_server_name undefNET
irc_server_port 6668
irc_server_motd ****************************************
irc_server_motd *  undefNET ...        _           __  *
irc_server_motd *  _   _   _ __     __| |   ___   / _| *
irc_server_motd * | | | | | '_ \   / _` |  / _ \ | |_  *
irc_server_motd * | |_| | | | | | | (_| | |  __/ |  _| *
irc_server_motd *  \__,_| |_| |_|  \__,_|  \___| |_|   *
irc_server_motd ****************************************

# define all three of these below if you want to provide the ability
# for users to become IRCOP's. See 'add_operator' in 
# POE::Component::IRC::Server for more information.
# irc_server_op_username someoppername
# irc_server_op_password changeme
# irc_server_op_ipmask *

# these are the options for the irc bot irc_bot.pl
irc_bot_server_host localhost
irc_bot_server_port 6668
irc_bot_nickname undefBOT

# http server
http_server_host localhost
http_server_port 3000
http_server_path /somepath/

# tag matching
# [] tags
irc_log_tag_regexp \[([\w\S]+?)\]
# hashtags (#foo)
# irc_log_tag_regexp '#([\w\S]+)'

# how many seconds until we think it's a new conversation?
irc_log_conversation_break 300

# file storage stuff
# where do we store uploads?
file_store_path ./store
# how many levels of directory hashing should we use?
file_store_depth 3

upload_url http://example.org/upload/HASH/
upload_email uploads+HASH@example.org

# email stuff, must be writable by the mail server user
email_queue_path ./queue

# plugins
plugin_banter_enabled 0
plugin_statistics_enabled 0
plugin_google_enabled 0
plugin_help_enabled 0
plugin_version_enabled 0

# Hailo plugin
# The Hailo plugin uses the perl module Hailo (available on CPAN) to 'learn'
# from the conversations on the channel, and occasionally spout something
# 'interesting'.
# The settings below determine how likely this is to happen.
# It is evaluated once per minute, based on how 'noisy' the channel is, and
# what percentage chance there is of an utterance occuring. If there have been
# more than 'plugin_hailo_noisy_messages' in one minute, the chance of the bot
# saying something is equal to 'plugin_hailo_noisy_chance'. If zero, the chance
# is 'plugin_hailo_quiet_chance'. Otherwise it is in between.
plugin_hailo_enabled 0
plugin_hailo_quiet_chance 0.01  # 1% chance per minute
plugin_hailo_noisy_chance 0.90  # 90% chance per minute
plugin_hailo_noisy_messages 20  # 20 messages a minute == noisy

